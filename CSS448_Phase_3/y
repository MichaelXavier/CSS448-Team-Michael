%{

/* declarations section */
#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include "STObject.h"
#include "actions.h"
using namespace std; 

extern void yyerror(const char *s);
extern int yylex();

extern string* errors;
extern bool has_errors;
extern int error_count;

STObject* symTable;

//variable/const stuff
string name;
string type_name;
Constant* const_temp;
IdentRecord* ident_temp;
IdentRecord* type_ptr;
IdType current_idtype;
Procedure* proc_temp;
Parameter* param_temp;
Constant* const_range_low;
Constant* const_range_high;
string str_range_low;
string str_range_high;
bool range_is_str = false;
vector<PointerHelper*>declared_ptr_helpers;

//helpers
ArrayHelper* array_helper;
ProgramHelper* program_helper;
RecordHelper* record_helper;
SetHelper* set_helper;
VarDecHelper* var_dec_helper;
ConstDecHelper* const_dec_helper;
queue<string&> ident_queue;
queue<Constant*> const_queue;
queue<Parameter*> param_queue;
ProcedureHelper* procedure_helper;
PointerHelper* pointer_helper;

extern string s;

%}

/* definition section */

%start  CompilationUnit
%token  yand yarray yassign ybegin ycaret ycase ycolon ycomma yconst ydispose 
        ydiv ydivide ydo  ydot ydotdot ydownto yelse yend yequal yfalse
        yfor yfunction ygreater ygreaterequal yident yif yin yleftbracket
        yleftparen yless ylessequal yminus ymod ymultiply ynew ynil ynot 
        ynotequal ynumber yof  yor yplus yprocedure yprogram yread yreadln  
        yrecord yrepeat yrightbracket yrightparen  ysemicolon yset ystring
        ythen  yto ytrue ytype  yuntil  yvar ywhile ywrite ywriteln yunknown

%%
/* rules section */

/**************************  Pascal program **********************************/

CompilationUnit    :  ProgramModule {endProgram();}
                   ;
ProgramModule      :  yprogram 
                      yident 
                      {program_helper = new ProgramHelper(s)} 
                      ProgramParameters ysemicolon 
                      {startProgram(program_helper->GetProgramObj());}
                      Block ydot
                      {delete program_helper; program_helper = NULL;}
                   ;
ProgramParameters  :  yleftparen  IdentList  
                      yrightparen
                      {program_helper->AddParameterNames(ident_queue);} 
                   ;
IdentList          :  yident 
                      {ident_queue.push(s);}
                   |  IdentList ycomma yident
                      {ident_queue.push(s);}
                   ;

/**************************  Declarations section ***************************/

Block              :  Declarations  ybegin  StatementSequence  yend
                   ;
Declarations       :  ConstantDefBlock              /* you do this one */
                      TypeDefBlock
                      VariableDeclBlock             /* you finish this one */
                      SubprogDeclList  
                   ;
ConstantDefBlock   :  /*** empty ***/                                  /* you finish it */
                   |  yconst 
                      {const_dec_helper = new ConstDecHelper(); } 
                      ConstantDefList
                      {
                        const_dec_helper->sendToSt(symTable);
                        delete const_dec_helper;
                        const_dec_helper = NULL;
                      }
                   ;
ConstantDefList    :  ConstantDef 
                      {const_dec_helper->AddConst(const_temp);} 
                      ysemicolon
                   |  ConstantDefList ConstantDef 
                      {const_dec_helper->AddConst(const_temp);} 
                      ysemicolon
                   ;
TypeDefBlock       :  /*** empty ***/
                   |  ytype  TypeDefList          
                      {checkPointers(declared_ptr_helpers);}
                   ;
TypeDefList        :  TypeDef  ysemicolon
                   |  TypeDefList TypeDef ysemicolon  
                   ;
VariableDeclBlock  :  /*** empty ***/
				           |  yvar 
                      VariableDeclList
                   ;
VariableDeclList   :  VariableDecl ysemicolon
                   |  VariableDeclList VariableDecl ysemicolon /*ADDED: recursive case*/
                   ;  
ConstantDef        :  yident 
                      {const_temp = new Constant(s);}
                      yequal  ConstExpression /*FIXME: may not cover empty consts*/
                   ;
TypeDef            :  yident
                      {name = s;}
                      yequal  Type
                      {
                        if (symTable->insert(type_ptr, current_idtype)) {
                          //Attempt to resolve any pointers to this new type
                          resolvePointers(type_ptr, declared_ptr_helpers);
                        } else {
                          cout << "Error: could not insert type into the ST: " << type_ptr->getName() << endl;
                          delete type_ptr;
                        }
                        type_ptr = NULL;
                      }
                   ;
VariableDecl       :  {var_dec_helper = new VarDecHelper();} 
                      IdentList  ycolon 
                      {var_dec_helper->AddVars(ident_queue);} 
                      Type
                      {delete var_dec_helper; var_dec_helper = NULL;}
                   ;

/***************************  Const/Type Stuff  ******************************/

ConstExpression    :  UnaryOperator  ConstFactor
                   |  ConstFactor
                   |  ystring 
                      {const_temp->setConstFactor(s);}
                   ;
ConstFactor        :  yident
                      {
                        ident_temp = symTable->lookup(s);
                        if (ident_temp != NULL) {
                          const_temp->setConstFactor(type_ptr); 
                        } else {
                          cout << "Error: Constant assigned to an undefined ident." << endl;
                        }
                      
                      }
                   |  ynumber
                      {const_temp->setConstFactor(strToInt(s));}
                   |  ytrue
                      {const_temp->setConstFactor(true);}
                   |  yfalse
                      {const_temp->setConstFactor(false);}
                   |  ynil
                      {const_temp->setConstFactor(static_cast<IdentRecord*>(NULL));} /*FIXME: unsure about this*/
                   ;
Type               :  yident 
                      {type_ptr = symTable->lookup(s);}
                   |  ArrayType
                   |  PointerType
                   |  RecordType
                   |  SetType 
                   ;
ArrayType          :  yarray 
                      {array_helper = new ArrayHelper(name)} 
                      yleftbracket Subrange 
                      {
                        /*FIXME: use range struct*/
                        if (range_is_str) {
                          array_helper->addDimension(str_range_low, str_range_high);
                        } else {
                          /*FIXME: how do we handle const ranges*/
                        }
                      } 
                      SubrangeList 
                      /*FIXME: todo*/
                      yrightbracket  yof Type
                      {
                        if (array_helper->sendToSt(symTable)) {
                          //get the new IdentRecord back for resolvePointers
                          type_ptr = symTable->lookup(name);
                        } else {
                          type_ptr = NULL;
                        }
                      }
                   ;
SubrangeList       :  
                   |  SubrangeList ycomma Subrange 
                   ;
Subrange           :  ConstFactor 
                      {const_queue.push_back(const_temp); range_is_str = false;} 
                      ydotdot ConstFactor 
                      {const_queue.push_back(const_temp);}
                   |  ystring 
                      {str_range_low = s; range_is_str = false;} 
                      ydotdot  ystring
                      {str_range_high = s;} 
                   ;
RecordType         :  yrecord 
                      {record_helper = new RecordHelper(name);} 
                      FieldListSequence  
                      {
                        if (recordHelper->sendToSt(symTable)) {
                          //get the new IdentRecord back for resolvePointers
                          type_ptr = symTable->lookup(name);
                        } else {
                          type_ptr = NULL;
                        }
                      }
                      yend 
                   ;
SetType            :  yset {set_helper = new SetHelper(name);}  yof  Subrange 
                      { 
                        /*FIXME: use range struct*/
                        if (range_is_str) {
                          set_helper.setRangeLow(str_range_low);
                          set_helper.setRangeHigh(str_range_high);
                        } else if(!const_queue.empty()) {
                          const_temp = const_queue.pop_front(); 
                          if(const_temp->getConstType() == "i")
                          { 
                            set_helper.setRangeLow(const_temp.getConstInt());
                            delete const_temp;
                          }
                          else
                            cout << "Error: set range must be an integer" << endl;
                          
                          const_temp = const_queue.pop_front(); 
                          if(const_temp->getConstType() == "i")
                          { 
                            set_helper.setRangeHigh(const_temp.getConstInt());
                            delete const_temp;
                          }
                          else
                            cout << "Error: set range must be an integer" << endl;
                        } else {
                          cout << "Error: Const queue was empty when trying to set up SetHelper" << endl;
                        }
                        /*will fail validation if there's a problem*/
                        if (set_helper->sendToSt(symTable)) {
                          //get the new IdentRecord back for resolvePointers
                          type_ptr = symTable->lookup(name);
                        } else {
                          type_ptr = NULL;
                        }
                        delete set_helper; 
                        setHelper = NULL;
                      }					  
                   ;
PointerType        :  ycaret 
                      yident 
                      {
                       pointer_helper = new PointerHelper(name); /*name is matched in the caling rule*/
                       pointer_helper->setDeclaredType(s);/*get the name of what it's supposed to point to*/
                       declared_ptr_helpers.push_back(pointer_helper); /*put it on the vector for later*/
                       pointer_helper = NULL;
                      } 
                   ;
FieldListSequence  :  FieldList 
                      {record_helper.addFields(symTable);}
                   |  FieldListSequence  ysemicolon  FieldList 
                      {record_helper.addFields(symTable);}
                   ;
FieldList          :  IdentList 
                      {
                        for(int i = 0; i < ident_queue.size(); i++) {
                          record_helper.addFieldName(ident_queue.pop()); 
                        }
                      }
					   ycolon  Type {record_helper.setCurrentFieldType(type_name);}
                   ;

/***************************  Statements  ************************************/

StatementSequence  :  Statement  
                   |  StatementSequence  ysemicolon  Statement
                   ;
Statement          :  Assignment
                   |  ProcedureCall
                   |  IfStatement
                   |  CaseStatement
                   |  WhileStatement
                   |  RepeatStatement
                   |  ForStatement
                   |  IOStatement
                   |  MemoryStatement
                   |  ybegin StatementSequence yend
                   |  /*** empty ***/
                   ;
Assignment         :  Designator yassign Expression
                   ;
ProcedureCall      :  yident 
                   |  yident ActualParameters
                   ;
IfStatement        :  yif  Expression  ythen  Statement  ElsePart
                   ;
ElsePart           :  /*** empty ***/
                   |  yelse  Statement  
                   ;
CaseStatement      :  ycase  Expression  yof  CaseList  yend
                   ;
CaseList           :  Case
                   |  CaseList  ysemicolon  Case  
                   ;
Case               :  CaseLabelList  ycolon  Statement
                   ;
CaseLabelList      :  ConstExpression  
                   |  CaseLabelList  ycomma  ConstExpression   
                   ;
WhileStatement     :  ywhile  Expression  ydo  Statement  
                   ;
RepeatStatement    :  yrepeat  StatementSequence  yuntil  Expression
                   ;
ForStatement       :  yfor  yident  yassign  Expression  WhichWay  Expression
                            ydo  Statement
                   ;
WhichWay           :  yto  |  ydownto
                   ;
IOStatement        :  yread  yleftparen  DesignatorList  yrightparen
                   |  yreadln  
                   |  yreadln  yleftparen DesignatorList  yrightparen 
                   |  ywrite  yleftparen  ExpList  yrightparen
                   |  ywriteln  
                   |  ywriteln  yleftparen  ExpList  yrightparen 
                   ;

/***************************  Designator Stuff  ******************************/

DesignatorList     :  Designator  
                   |  DesignatorList  ycomma  Designator 
                   ;
Designator         :  yident  DesignatorStuff 
                   ;
DesignatorStuff    :  /*** empty ***/
                   |  DesignatorStuff  theDesignatorStuff
                   ;
theDesignatorStuff :  ydot yident 
                   |  yleftbracket ExpList yrightbracket 
                   |  ycaret 
                   ;
ActualParameters   :  yleftparen  ExpList  yrightparen
                   ;
ExpList            :  Expression   
                   |  ExpList  ycomma  Expression       
                   ;
MemoryStatement    :  ynew  yleftparen  yident  yrightparen  
                   |  ydispose yleftparen  yident  yrightparen
                   ;

/***************************  Expression Stuff  ******************************/

Expression         :  SimpleExpression  
                   |  SimpleExpression  Relation  SimpleExpression 
                   ;
SimpleExpression   :  TermExpr
                   |  UnaryOperator  TermExpr
                   ;
TermExpr           :  Term  
                   |  TermExpr  AddOperator  Term
                   ;
Term               :  Factor  
                   |  Term  MultOperator  Factor
                   ;
Factor             :  ynumber
                   |  ytrue
                   |  yfalse
                   |  ynil
                   |  ystring
                   |  Designator
                   |  yleftparen  Expression  yrightparen
                   |  ynot Factor
                   |  Setvalue
                   ;
Setvalue           :  yleftbracket ElementList  yrightbracket
                   |  yleftbracket yrightbracket
                   ;
ElementList        :  Element  
                   |  ElementList  ycomma  Element
                   ;
Element            :  ConstExpression  
                   |  ConstExpression  ydotdot  ConstExpression 
                   ;

/***************************  Subprogram Stuff  ******************************/

SubprogDeclList    :  /*** empty ***/
                   |  SubprogDeclList ProcedureDecl ysemicolon  
                   |  SubprogDeclList FunctionDecl ysemicolon
                   ;
ProcedureDecl      :  ProcedureHeading  ysemicolon  Block 
                   ;
FunctionDecl       :  FunctionHeading  ycolon  yident  ysemicolon  Block
                   ;
ProcedureHeading   :  yprocedure  yident  
                      {procedure_helper = new ProcedureHelper(s)}
                   |  yprocedure  yident  
                      {procedure_helper = new ProcedureHelper(s)}
                      FormalParameters
                      {procedure_helper->AddParameters(param_queue);}
                   ;
FunctionHeading    :  yfunction  yident  
                   |  yfunction  yident  FormalParameters
                   ;
FormalParameters   :  yleftparen FormalParamList yrightparen 
                   ;
FormalParamList    :  OneFormalParam  /* nothing to do here */
                   |  FormalParamList ysemicolon OneFormalParam
                   ;
OneFormalParam     :  yvar  IdentList /* have the param names now */
                      ycolon  yident
                      {
                        ident_temp = symTable->lookup(s);
                        while(!ident_queue.empty()) {
                          Parameter* param = new Parameter(ident_queue.front())
                          param->setTypePtr(ident_temp);
                          param_queue.push(param);
                          ident_queue.pop();
                        }
                      }
                   |  IdentList  /* have the param names now */
                      ycolon  yident
                      {
                        ident_temp = symTable->lookup(s);
                        while(!ident_queue.empty()) {
                          Parameter* param = new Parameter(ident_queue.front())
                          param->setTypePtr(ident_temp);
                          param_queue.push(param);
                          ident_queue.pop();
                        }
                      }
                   ;

/***************************  More Operators  ********************************/

UnaryOperator      :  yplus | yminus
                   ;
MultOperator       :  ymultiply | ydivide | ydiv | ymod | yand 
                   ;
AddOperator        :  yplus | yminus | yor
                   ;
Relation           :  yequal  | ynotequal | yless | ygreater 
                   |  ylessequal | ygreaterequal | yin
                   ;

%%

/* program section */

void yyerror(const char *s) {
   cout << s << endl;
}

extern int yylex();

